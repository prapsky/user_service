// Code generated by MockGen. DO NOT EDIT.
// Source: service/user/detail/detail.go

// Package mock_service_user_detail is a generated GoMock package.
package mock_service_user_detail

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/prapsky/user_service/entity"
	service_user_detail "github.com/prapsky/user_service/service/user/detail"
)

// MockUserDetailUseCase is a mock of UserDetailUseCase interface.
type MockUserDetailUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserDetailUseCaseMockRecorder
}

// MockUserDetailUseCaseMockRecorder is the mock recorder for MockUserDetailUseCase.
type MockUserDetailUseCaseMockRecorder struct {
	mock *MockUserDetailUseCase
}

// NewMockUserDetailUseCase creates a new mock instance.
func NewMockUserDetailUseCase(ctrl *gomock.Controller) *MockUserDetailUseCase {
	mock := &MockUserDetailUseCase{ctrl: ctrl}
	mock.recorder = &MockUserDetailUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDetailUseCase) EXPECT() *MockUserDetailUseCaseMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockUserDetailUseCase) Do(ctx context.Context, input service_user_detail.UserDetailInput) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, input)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockUserDetailUseCaseMockRecorder) Do(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockUserDetailUseCase)(nil).Do), ctx, input)
}

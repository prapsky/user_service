// Code generated by MockGen. DO NOT EDIT.
// Source: service/user/register/register.go

// Package mock_service_user_register is a generated GoMock package.
package mock_service_user_register

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service_user_register "github.com/prapsky/user_service/service/user/register"
)

// MockRegisterUserUseCase is a mock of RegisterUserUseCase interface.
type MockRegisterUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterUserUseCaseMockRecorder
}

// MockRegisterUserUseCaseMockRecorder is the mock recorder for MockRegisterUserUseCase.
type MockRegisterUserUseCaseMockRecorder struct {
	mock *MockRegisterUserUseCase
}

// NewMockRegisterUserUseCase creates a new mock instance.
func NewMockRegisterUserUseCase(ctrl *gomock.Controller) *MockRegisterUserUseCase {
	mock := &MockRegisterUserUseCase{ctrl: ctrl}
	mock.recorder = &MockRegisterUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterUserUseCase) EXPECT() *MockRegisterUserUseCaseMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockRegisterUserUseCase) Do(ctx context.Context, input service_user_register.RegisterUserInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockRegisterUserUseCaseMockRecorder) Do(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRegisterUserUseCase)(nil).Do), ctx, input)
}

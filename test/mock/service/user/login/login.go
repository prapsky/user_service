// Code generated by MockGen. DO NOT EDIT.
// Source: service/user/login/login.go

// Package mock_service_user_login is a generated GoMock package.
package mock_service_user_login

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service_user_login "github.com/prapsky/user_service/service/user/login"
)

// MockLoginUserUseCase is a mock of LoginUserUseCase interface.
type MockLoginUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockLoginUserUseCaseMockRecorder
}

// MockLoginUserUseCaseMockRecorder is the mock recorder for MockLoginUserUseCase.
type MockLoginUserUseCaseMockRecorder struct {
	mock *MockLoginUserUseCase
}

// NewMockLoginUserUseCase creates a new mock instance.
func NewMockLoginUserUseCase(ctrl *gomock.Controller) *MockLoginUserUseCase {
	mock := &MockLoginUserUseCase{ctrl: ctrl}
	mock.recorder = &MockLoginUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginUserUseCase) EXPECT() *MockLoginUserUseCaseMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockLoginUserUseCase) Do(ctx context.Context, input service_user_login.LoginUserInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockLoginUserUseCaseMockRecorder) Do(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockLoginUserUseCase)(nil).Do), ctx, input)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: service/user/insert/insert.go

// Package mock_service_user_insert is a generated GoMock package.
package mock_service_user_insert

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	service_user_insert "github.com/prapsky/user_service/service/user/insert"
)

// MockInsertUserUseCase is a mock of InsertUserUseCase interface.
type MockInsertUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockInsertUserUseCaseMockRecorder
}

// MockInsertUserUseCaseMockRecorder is the mock recorder for MockInsertUserUseCase.
type MockInsertUserUseCaseMockRecorder struct {
	mock *MockInsertUserUseCase
}

// NewMockInsertUserUseCase creates a new mock instance.
func NewMockInsertUserUseCase(ctrl *gomock.Controller) *MockInsertUserUseCase {
	mock := &MockInsertUserUseCase{ctrl: ctrl}
	mock.recorder = &MockInsertUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsertUserUseCase) EXPECT() *MockInsertUserUseCaseMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockInsertUserUseCase) Do(ctx context.Context, input service_user_insert.InsertUserInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockInsertUserUseCaseMockRecorder) Do(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockInsertUserUseCase)(nil).Do), ctx, input)
}
